---
import MainLayout from "./../../../layouts/MainLayout.astro";
---

<MainLayout>
  <div id="appContainer"></div>
  <p class="absolute left-1/2 top-10 -translate-x-1/2 pointer-events-none uppercase font-bold text-primaryg-700">Click anywhere in the screen!</p>
</MainLayout>

<script>
  import { Application, Assets, Sprite, Graphics } from "pixi.js";

  const appContainer = document.getElementById("appContainer") as HTMLDivElement;
  let app: Application;

  const setup = async () => {
    await app.init({ resizeTo: window, background: "#3D348B" });
    appContainer.appendChild(app.canvas);
  };

  const preload = async () => {
    await Assets.load([
      { alias: "warrior", src: "/projects/pixi-js/001-pixi-js-learn/warrior.png" },
      { alias: "fish1", src: "/projects/pixi-js/001-pixi-js-learn/fish1.png" },
      { alias: "fish2", src: "/projects/pixi-js/001-pixi-js-learn/fish2.png" },
      { alias: "fish3", src: "/projects/pixi-js/001-pixi-js-learn/fish3.png" },
    ]);
  };

  let audioContext: AudioContext;
  let analyser: AnalyserNode;
  let source: AudioBufferSourceNode;
  let isLoading = false;
  let isRunning = false;

  let bufferLength: number;
  let dataArray: Uint8Array;

  const stop = async () => {
    if (source) {
      source.stop();
      source.disconnect();
      isRunning = false;
    }
  };

  const runAudio = async () => {
    if (isLoading) return;
    if (isRunning) return stop();

    isLoading = true;
    audioContext = new window.AudioContext();
    analyser = audioContext.createAnalyser();

    const res = await fetch("/projects/pixi-js/001-pixi-js-learn/gasolina.mp3");
    const resBuffer = await res.arrayBuffer();
    const resDecodeAudioData = await audioContext.decodeAudioData(resBuffer);

    source = audioContext.createBufferSource();
    source.buffer = resDecodeAudioData;
    source.connect(analyser);
    analyser.connect(audioContext.destination);
    source.start();

    analyser.fftSize = 256; // Puedes ajustar esto según lo detallado que quieras la visualización
    bufferLength = analyser.frequencyBinCount;
    dataArray = new Uint8Array(bufferLength);

    isLoading = false;
    isRunning = true;
  };
  appContainer.addEventListener("click", runAudio.bind(this));

  (async () => {
    app = new Application();
    await setup();
    await preload();

    const bars: Graphics[] = [];
    for (let i = 0; i < 128; i++) {
      const newShape = new Graphics().rect((i * app.canvas.width) / 128, app.canvas.height, app.canvas.width / 128, 0).fill("#181538");
      newShape.pivot.set(0, 1);
      bars.push(newShape);
      app.stage.addChild(bars[i]);
    }

    app.ticker.add(() => {
      if (isRunning) {
        analyser.getByteFrequencyData(dataArray);
        for (let i = 0; i < bufferLength; i++) {
          bars[i].clear();
          bars[i].rect((i * app.canvas.width) / 128, app.canvas.height / 2, app.canvas.width / 128, (((dataArray[i] * 100) / 256) * app.canvas.height) / 100).fill("#181538");
          bars[i].pivot.y = (((dataArray[i] * 100) / 256) * app.canvas.height) / 100 / 2;
        }
      }
    });
  })();
</script>
